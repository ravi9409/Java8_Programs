package com.winterbe.java8.samples.stream;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class StreamClassLab {
    public static void main(String[] args) {
        List<Integer> list= Arrays.asList(1,2,3,4,5,6,7,8,9);
        Stream<Integer> stream=list.stream();
        stream.forEach(System.out::print);
        //You can traverse the stream only once you will get error when you execute line below
        stream.forEach(System.out::print);

        List<Integer> list
                = Arrays.asList(0, 2, 4);
        List<Integer> list1
                = Arrays.asList(6, 8, 10);
        List<List<Integer>> list2 = Arrays.asList(list, list1);
        //method to process flatmap
        list2.stream().map(Collection::stream).flatMap(e -> e).forEach(System.out::println);
        //limit method usage
        System.out.println("---------------------------------");
        list.stream().limit(2).forEach(System.out::println);
        System.out.println("---------------------------------");
        //skip method usage, argument inside skip method starts from 1 and not from 0
        list.stream().skip(1).forEach(System.out::println);
        System.out.println("---------------------------------");
        //skip and limit method combined
        list.stream().skip(1).limit(1).forEach(System.out::println);

          //Three ways to create the stream
        System.out.println("-----1------");
        Stream<Integer> myStream1 = Stream.empty();
        myStream1.forEach(System.out::println);
        System.out.println("------2------");
        Stream<Integer> myStream2 = Stream.of(11, 12, 13);
        myStream2.forEach(System.out::println);
        List<Integer> numsList = Arrays.asList(11, 12, 13, 14, 15);
        System.out.println("-----3------");
        Stream<Integer> myStream3 = numsList.stream();
        myStream3.forEach(System.out::println);

        //Adding two list to stream
        List<Integer> list=Arrays.asList(11,12,13);
        List<Integer> list1=Arrays.asList(14,15,16);
        Stream<List<Integer>> stream=Stream.of(list,list1);

        //Adding two streams to stream using concat
        Stream<Integer> stream=Arrays.asList(11,12,13).stream();
        Stream<Integer> stream1=Arrays.asList(14,15,16).stream();
        Stream<Integer> stream2=Stream.concat(stream,stream1);

         //using stream iterate function
        Stream.iterate(11,e->e+1).limit(10).forEach(System.out::println);

        //Generate method to produce random stream
        Stream.generate(() -> (new Random()).nextInt(100))
                .limit(10)
                .forEach(System.out::println);

        //Reduce method with exmaple
        List<Integer> numsList = Arrays.asList(1, 2, 3, 4, 5);
        int sumResult1 = numsList.stream().reduce(0, (a, b) -> a + b);
        System.out.println(sumResult1);
        System.out.println("-------------------");
        int sumResult2 = numsList.stream().reduce(0, Integer::sum);
        System.out.println(sumResult2);
        System.out.println("-------------------");
        int mulResult = numsList.stream().reduce(1, (a, b) -> a * b);
        System.out.println(mulResult);
        System.out.println("-------------------");
        Integer lastElement = numsList.stream()
                .reduce((num1, num2) -> num2)
                .orElse(-1);
        System.out.println(lastElement);

        //count method
        long count= mylist.stream()
                .filter(num -> num%2!=0)
                .map(num -> num * num)
                .count();
        System.out.println(count);
        System.out.println("---------------------");
        //max method
        Optional<Integer> maxNum = mylist.stream()
                .filter(num -> num%2!=0)
                .map(num -> num * num)
                .max((num1, num2) -> num1.compareTo(num2));
        System.out.println(maxNum);
        maxNum.ifPresent(System.out::println);
        System.out.println("---------------------");
        //min method
        Optional<Integer> minNum = mylist.stream()
                .filter(num -> num%2!=0)
                .map(num -> num * num)
                .min((num1, num2) -> num1.compareTo(num2));
        System.out.println(minNum);
        minNum.ifPresent(System.out::println);
        System.out.println("---------------------");
        System.out.println("Done!!!");

        //findAny method
        Optional<Integer> mycourse1 =numList.stream().findAny();
        mycourse1.ifPresent(System.out::println);
        //findFirst method
        System.out.println("-------------");
        Optional<Integer> mycourse2 =numList.stream().findFirst();
        mycourse2.ifPresent(System.out::println);

         List<Integer> numsList = Arrays.asList(5, 4, 8, 3, 6, 7, 2, 9);
        //toCollection method
        List<Integer> mylist2 = numsList.stream()
                .filter(num -> num % 2 == 0)
                .map(num -> num * num)
                .sorted()
                .collect(Collectors.toCollection(LinkedList::new));
        System.out.println(mylist2);
        System.out.println("-------------");
        System.out.println("Done!!!");

        Set<Integer> myset2 = numsList.stream()
                .filter(num -> num % 2 == 0)
                .map(num -> num * num)
                .sorted()
                .collect(Collectors.toCollection(TreeSet::new));
        System.out.println(myset2);
        System.out.println("-------------");
        System.out.println("Done!!!");
        //counting method
        List<Integer> numsList = Arrays.asList(1, 2, 3, 4, 5);
        long count = numsList.stream()
                .filter(num -> num % 2 != 0)
                .collect(Collectors.counting());
        System.out.println(count);
        //reducing method
        long sumResult = numsList.stream()
                .filter(num -> num % 2 != 0)
                .collect(Collectors.reducing(0, (num1,num2)-> num1+num2));
        System.out.println(sumResult);

          //Returns a Stream consisting of the elements of this stream, each boxed to an Integer.
      List<Integer> list=IntStream.of(1,2,3,4,5).boxed().collect(Collectors.toList());

         List<Integer> numsList = Arrays.asList(1, 2, 3, 4, 5);
        long count = numsList.stream()
                .filter(num -> num % 2 != 0)
                .collect(Collectors.counting());
        System.out.println(count);
        long sumResult = numsList.stream()
                .filter(num -> num % 2 != 0)
                .collect(Collectors.reducing(0, (num1, num2) -> num1 + num2));
        System.out.println(sumResult);
        long mulResult = numsList.stream()
                .filter(num -> num % 2 != 0)
                .collect(Collectors.reducing(1, (num1, num2) -> num1 * num2));
        System.out.println(mulResult);
        List<String> courseList = Arrays.asList("Java", "SpringBoot", "DevOps");
        String result = courseList.stream()
                .collect(Collectors.joining(" --- "));
        System.out.println(result);

         List<Student> numsList = DataUtil.getStudentList();
        numsList.forEach(System.out::println);
        System.out.println("--------------------------");
        numsList.stream().sorted((stu1, stu2) -> stu1.getSname().compareTo(stu2.getSname())).forEach(System.out::println);
        System.out.println("--------------------------");
        numsList.stream().filter(mystu -> mystu.getFeeBal() > 0).forEach(System.out::println);
        System.out.println("------------------------------");
        Optional<Student> studentOptional = numsList.stream().max((stu1, stu2) -> (int) (stu2.getFeePaid() - stu1.getFeePaid()));
        studentOptional.ifPresent(System.out::println);
        System.out.println("------------------------------");
        //group by method
        Map<String, List<Student>> map = numsList.stream().collect(Collectors.groupingBy(Student::getSname));
        System.out.println(map);
        System.out.println("-------------------------------");
        //Number of times element is repeated in an array.
        int[] arr = {1, 2, 3, 2, 1, 4, 5, 4};
        Map<Integer, Long> maps = Arrays.stream(arr)
                .boxed()
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
        System.out.println(maps);
        System.out.println("-----------------------");
        //Number of times element is repeated in an String array.
        List<String> items =
                Arrays.asList("apple", "apple", "banana",
                        "apple", "orange", "banana", "papaya");

        Map<String, Long> result =
                items.stream().collect(
                        Collectors.groupingBy(
                                Function.identity(), Collectors.counting()
                        )
                );
        System.out.println(result);

        //Partitioning By Example
    List<Student> studentList= DataUtil.getStudentList();
    Map<Boolean,List<Student>> stuMap=studentList.stream().collect(Collectors.partitioningBy(stu->stu.getFeeBal()==0));
        System.out.println(stuMap);

           //summingDouble By Example
    List<Student> studentList= DataUtil.getStudentList();
    double totalFeebal=studentList.stream().collect(Collectors.summingDouble(Student::getFeeBal));
        System.out.println(totalFeebal);

        //Getting total feebal as per grouping
    List<Student> studentList= DataUtil.getStudentList();
    Map<String,Double> maps=studentList.stream().collect(
            Collectors.groupingBy(Student::getCourseName,
            Collectors.summingDouble(Student::getFeeBal)));
        System.out.println(maps);

        //Getting total feebal as per grouping
    List<Student> studentList= DataUtil.getStudentList();
    Map<String,Double> maps=studentList.stream().collect(
            Collectors.groupingBy(Student::getCourseName,
            Collectors.summingDouble(Student::getFeeBal)));
        System.out.println(maps);

        List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 6, 6);
        List<String> strings = Arrays.asList("alpha", "beta", "gamma");
        Integer integer = integers
                .stream()
                .collect(Collectors.minBy(Comparator.naturalOrder()))
                .get();
        System.out.println(integer);
        String string = strings
                .stream()
                .collect(Collectors.minBy(Comparator.reverseOrder()))
                .get();
        System.out.println(string);
    }
}